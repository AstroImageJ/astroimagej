name: Build & Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. 1.2.3.00)'
        required: true
  push:
    tags:
      - '[0-9]*.[0-9]*.[0-9]*.00'

jobs:
  package:
    name: Package ${{ matrix.osName }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            osName: linux-x64
            gradleTask: packageAijForLinux_x64
            artifactExt: tgz
            wrapper: ./gradlew
          - runner: macos-latest
            osName: mac-aarch64
            gradleTask: packageAijForMac_aarch64
            artifactExt: dmg
            wrapper: ./gradlew
          - runner: macos-latest
            osName: mac-x64
            gradleTask: packageAijForMac_x64
            artifactExt: dmg
            wrapper: ./gradlew
          - runner: windows-latest
            osName: windows-x64
            gradleTask: packageAijForWindows_x64
            artifactExt: msi
            wrapper: ./gradlew.bat
    outputs:
      artifact: ${{ steps.upload.outputs.artifact }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: Make Gradle wrapper executable
        if: ${{ matrix.runner != 'windows-latest' }}
        run: chmod +x ./gradlew

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        if: |
          (matrix.runner == 'macos-latest') &&
          (env.BUILD_CERTIFICATE_BASE64 != '') &&
          (env.P12_PASSWORD != '') &&
          (env.BUILD_PROVISION_PROFILE_BASE64 != '') &&
          (env.KEYCHAIN_PASSWORD != '')
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Run jpackage (${{ matrix.gradleTask }})
        run: ${{ matrix.wrapper }} ${{ matrix.gradleTask }}

      - name: Upload installer ( ${{ matrix.osName }} )
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.osName }}
          path: |
            build/distributions/**/AstroImageJ*.${{ matrix.artifactExt }}

  create-release:
    name: Create GitHub Release
    needs: package
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Determine version
        id: vars
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "VERSION=$TAG_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Download installer (linux-x64)
        uses: actions/download-artifact@v4
        with:
          name: installer-linux-x64
        continue-on-error: true

      - name: Download installer (mac-aarch64)
        uses: actions/download-artifact@v4
        with:
          name: installer-mac-aarch64
        continue-on-error: true

      - name: Download installer (mac-x64)
        uses: actions/download-artifact@v4
        with:
          name: installer-mac-x64
        continue-on-error: true

      - name: Download installer (windows-x64)
        uses: actions/download-artifact@v4
        with:
          name: installer-windows-x64
        continue-on-error: true

      - name: Display structure of downloaded files
        run: ls -R

      - name: Prepare flat release assets
        # move & rename each installer into release_assets/
        run: |
          VERSION=${{ steps.vars.outputs.VERSION }}
          mkdir -p release_assets

          mv Linux-x64/**/*.tgz release_assets/AstroImageJ-linux-x64-${VERSION}.tgz
          mv Mac-aarch64/**/*.dmg release_assets/AstroImageJ-mac-aarch64-${VERSION}.dmg
          mv Mac-x64/**/*.dmg release_assets/AstroImageJ-mac-x64-${VERSION}.dmg
          mv Windows-x64/**/*.msi release_assets/AstroImageJ-windows-x64-${VERSION}.msi

      - name: Display structure of moved files
        run: ls -R

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
