import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import io.github.fvarrui.javapackager.gradle.PackageTask
import io.github.fvarrui.javapackager.model.FileAssociation
import io.github.fvarrui.javapackager.model.MacStartup
import io.github.fvarrui.javapackager.model.WindowsExeCreationTool
import org.ajoberstar.grgit.Grgit
import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.file.Files
import java.nio.file.StandardCopyOption
import java.time.Instant
import java.time.temporal.ChronoUnit

buildscript {
    repositories {
        //mavenLocal()
        /*maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }*/
        maven {
            url 'gradlePlugins'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'io.github.fvarrui:javapackager:1.7.6'
    }

    // Needed for GrGit 5+
    if (!JavaVersion.current().java11Compatible) {
        throw new GradleException("Gradle daemon must be running on Java 11 or greater.")
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Plugin to download files
    id "de.undercouch.download" version "5.6.0"

    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.+"

    id 'net.nemerosa.versioning' version '3.1.0'

    // Used to download test data
    id 'org.ajoberstar.grgit' version '5.+' apply false
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'

// See https://guides.gradle.org/creating-multi-project-builds/

// Java version to compile and package with
def shippingJava = Integer.parseInt(project.javaShippingVersion as String)
// Minimum Java version binaries should be compatible with
def targetJava = Integer.parseInt(project.minJava as String)

allprojects {
    repositories {
        mavenCentral()
    }
    group 'com.astroimagej'

    tasks.withType(JavaCompile).configureEach {
        // Set language level and binary level to targetJava (binary only when building with a JDK 9+)
        // Ensures newer language features aren't used
        options.release.set(targetJava)

        // AIJ is large, so this caches compiling results and only recompiles changed files
        options.incremental = true

        // Allow unicode
        options.encoding('UTF-8')

        options.fork = true

        options.compilerArgs << '-Xlint:-dep-ann'

        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(shippingJava)
        }
    }

    java {
        toolchain {
            // Gradle will download the JDK for compiling/running if one isn't found
            // This should prevent anyone from using an outdated JDK
            languageVersion.set(JavaLanguageVersion.of(shippingJava))
        }
    }
}

// Declare the version dynamically using the versioning plugin
def fullVersionProvider = providers.provider {
    def commitHash = '+' + versioning.info.build
    def branchName = '+' + versioning.info.branch
    def dirtySuffix = !versioning.info.dirty ? '' : '+local'

    "${rootProject.version}${branchName}${commitHash}${dirtySuffix}"
}

subprojects {
    version = fullVersionProvider.get()
}

dependencies {
    // This dependency is used by the application.
    //implementation 'com.google.guava:guava:29.0-jre'
    implementation project(':Nom_Fits')
    implementation project(':ij')
    implementation project(':Astronomy_')

    // Use JUnit test framework
    testImplementation(platform('org.junit:junit-bom:5.11.0'))
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.0'
    testImplementation 'org.awaitility:awaitility:4.2.1'
    testImplementation 'org.assertj:assertj-core:3.26.3'
    testImplementation 'org.assertj:assertj-swing-junit:3.17.1'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }

    //forkEvery = 1

    systemProperty "enforceEDTValidation", "false"

    //noinspection GroovyAssignabilityCheck, GroovyAccessibility
    javaLauncher = javaToolchains.launcherFor {// Force it to use the toolchain java version
        languageVersion = JavaLanguageVersion.of(shippingJava)
    }

    jvmArgs(readConfigFile())
    workingDir(file("${projectDir}/AIJ-Run/"))

    classpath += files(file("${projectDir}/AIJ-Run/ij.jar"))
}

tasks.test.dependsOn("preTest")
test.onlyIf { project.hasProperty('runTest') }

tasks.register('preTest') {
    def testDataPath = "${projectDir}/repos/aijtestdata"
    def testData = file(testDataPath)
    doLast {
        def targetRepo = testData
        if (!targetRepo.exists()) {
            def gitRepo = Grgit.clone(dir: testDataPath, uri: 'https://github.com/AstroImageJ/AijTestData')
        } else {
            def gitRepo = Grgit.open(dir: testDataPath)
            gitRepo.fetch()
            gitRepo.pull()
        }
    }
}

/**
 * The set of Java runtimes to download and package AIJ for.
 * Terms in the map are based on the query parameters.
 * To add a distribution, simply give it a unique name and fill out its map with the proper values.
 * See https://app.swaggerhub.com/apis-docs/azul/zulu-download-community/1.0#/bundles/get_bundles_latest_
 *
 * The file's name (name), major Java version (version), and MD5 hash (md5) are also added to this map. Those entries
 * are excluded from the definition for brevity.
 */
// Prefer using Property version
Map javaRuntimeSystems =
           [ mac: [ext: "zip", arch: "x86", os: "macos", hw_bitness: "64"]
           , armMac: [ext: "zip", arch: "arm", os: "macos", hw_bitness: "64"]
           , linux: [ext: "tar.gz", arch: "x86", os: "linux", hw_bitness: "64"]
           //, linuxArm: [ext: "tar.gz", arch: "arm", os: "linux", hw_bitness: "64"]
           //, linux32: [ext: "tar.gz", arch: "x86", os: "linux", hw_bitness: "32"]
           //, alpineLinux: [ext: "tar.gz", arch: "x86", os: "linux_musl", hw_bitness: "64"]
           , windows: [ext: "zip", arch: "x86", os: "windows", hw_bitness: "64"]
           //, armWindows: [ext: "zip", arch: "arm", os: "windows", hw_bitness: "64"]
           //, windows32: [ext: "zip", arch: "x86", os: "windows", hw_bitness: "32"]
           ]

def javaRuntimeSystemsProperty = project.objects.mapProperty(String, Map)

// Wrap the logic in a lazy property that caches the result
javaRuntimeSystemsProperty.convention(providers.provider {
    def jsonFile = layout.projectDirectory.file("jres/javaRuntimeSystems-${shippingJava}.json").asFile

    // If the JSON file exists, load the cached data
    /*if (jsonFile.exists()) {
        //println "Loading cached Java Runtime Systems data from JSON"
        return new JsonSlurper().parse(jsonFile) as Map
    }*/

    // If the JSON file exists and is recent, load the cached data
    if (jsonFile.exists()) {
        //println "Checking last modified date for the cached data."
        def lastModified = jsonFile.lastModified()
        def now = Instant.now().toEpochMilli()
        long daysSinceLastModified = ChronoUnit.DAYS.between(Instant.ofEpochMilli(lastModified), Instant.ofEpochMilli(now))

        if (daysSinceLastModified <= 30) {
            //println "Loading cached Java Runtime Systems data from JSON for Java version ${shippingJava} (last modified $daysSinceLastModified days ago)"
            return new JsonSlurper().parse(jsonFile) as Map
        } else {
            println "Cached data for Java version ${shippingJava} is older than 30 days, refetching..."
        }
    }

    // Otherwise, simulate a network query to populate the data
    println "Fetching Java Runtime Systems data from network"
    javaRuntimeSystems.each { sys, sysInfo ->
        // Other parameters of note:
        // &support_term=lts/mts/sts &release_status=ga/ea/both &bundle_type=${sysInfo.type}
        String url = "https://api.azul.com/zulu/download/community/v1.0/bundles/latest/?" +
                "os=${sysInfo.os}&arch=${sysInfo.arch}&hw_bitness=${sysInfo.hw_bitness}" +
                "&ext=${sysInfo.ext}&jdk_version=${shippingJava}"
        def meta
        try {
            meta = new JsonSlurper().parse(new URL(url)) // Pull the data from Azul
        } catch (Exception ignored) {
            logger.warn("A runtime (sys = {}, {}, {}, {}) failed to return from Azul!",
                    sysInfo.os, sysInfo.arch, sysInfo.ext, sysInfo.type)
            return
        }

        // Update the maps with the metadata
        sysInfo.version = meta.java_version.first()
        sysInfo.ext = meta.ext as String
        sysInfo.name = meta.name as String
        sysInfo.md5 = meta.md5_hash as String
        sysInfo.type = meta.bundle_type as String
        sysInfo.url = meta.url
    }

    // Save the fetched data to the JSON file
    jsonFile.parentFile.mkdirs() // Ensure the directory exists
    jsonFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(javaRuntimeSystems))
    return javaRuntimeSystems
})

tasks.register('fetchJavaRuntimeSystems', {
    group = 'runtime'
    description = 'Fetches Java runtime systems data or loads from cache'

    outputs.file(layout.projectDirectory.file("jres/javaRuntimeSystems-${shippingJava}.json"))

    /*doLast {
        println "Java Runtime Systems data: ${javaRuntimeSystemsProperty.get()}"
    }*/
})

tasks.named('fetchJavaRuntimeSystems').configure {
    inputs.property("javaRuntimeSystemsMap", javaRuntimeSystems)
    inputs.property("javaVersion", shippingJava) // Track changes to Java version

    outputs.upToDateWhen {
        def jsonFile = layout.projectDirectory.file("jres/javaRuntimeSystems-${shippingJava}.json").asFile

        if (jsonFile.exists()) {
            def lastModified = jsonFile.lastModified()
            def now = Instant.now().toEpochMilli()
            long daysSinceLastModified = ChronoUnit.DAYS.between(Instant.ofEpochMilli(lastModified), Instant.ofEpochMilli(now))
            return daysSinceLastModified <= 30 && jsonFile.text == JsonOutput.prettyPrint(JsonOutput.toJson(javaRuntimeSystems))
        }

        return false
    }
}

/**
 * Download the specified Java runtimes based on javaRuntimeSystems.
 */
tasks.register('downloadJavaRuntimes', Download) {
    dependsOn 'fetchJavaRuntimeSystems'
    mkdir(file("${projectDir}/jres"))

    /*onlyIf { //upToDate checks seems to automatically track this
        def needDownload = true
        javaRuntimeSystemsProperty.get().each { sys, sysInfo ->
            def jreZip = getProject().layout.projectDirectory.dir("jres/$sysInfo.name")
            if (needDownload) {
                needDownload = !jreZip.asFile.exists()
            }
        }

        return needDownload
    }*/

    def runtimeData = javaRuntimeSystemsProperty.get()
    //println "Using the following runtime data: $runtimeData"

    // Download jres concurrently
    src runtimeData.collect { sys, sysInfo ->
        sysInfo.url
    }

    overwrite false
    onlyIfModified true
    dest 'jres'

    // Collect current runtime files and extensions
    //noinspection GroovyAssignabilityCheck
    def currentFiles = runtimeData.collectEntries { [it.value.name, it.value.ext] }

    // Remove old unpacked runtimes
    file("${projectDir}/jres").traverse(type: groovy.io.FileType.DIRECTORIES, maxDepth: 0) {
        if (!currentFiles.collect { name, ext ->
            (name as String).replace("." + ext as String, "")
        }.contains(it.name)) {
            it.deleteDir()
        }
    }

    // Remove old packed runtimes
    file("${projectDir}/jres").traverse(type: groovy.io.FileType.FILES, maxDepth: 0) {
        if (!currentFiles.containsKey(it.name) && it.name != "javaRuntimeSystems-${shippingJava}.json") {
            it.delete()
        }
    }
}

/**
 * On MacOs, for some reason after a jdk is used once for packaging it becomes invalid.
 * This is run to "reset" the JDK to allow packaging to complete.
 * Runs only on MacOs
 */
tasks.register('deleteDecompressedJres') {
    outputs.upToDateWhen { false }
    onlyIf {
        Os.isFamily(Os.FAMILY_MAC)
    }
    if (Os.isFamily(Os.FAMILY_MAC)) {
        logger.info('Removing decompressed runtimes.')
        // Remove old unpacked runtimes
        file("${projectDir}/jres").traverse(type: groovy.io.FileType.DIRECTORIES, maxDepth: 0) {
            it.deleteDir()
        }
    }
}

/**
 * Verify the downloaded Java runtimes are correct.
 * If a file fails the check, delete it and rerun to attempt downloading again.
 * Could also check the sha256_hash.
 */
tasks.register('verifyDownloadedJres', Verify) {
    dependsOn 'downloadJavaRuntimes'
    mustRunAfter 'downloadJavaRuntimes'
    //noinspection GroovyAssignabilityCheck
    javaRuntimeSystemsProperty.get().each { sys, sysInfo ->
        //noinspection GroovyAssignabilityCheck
        src file("${projectDir}/jres/${sysInfo.name}")
        //noinspection GroovyAssignabilityCheck
        algorithm 'MD5'
        //noinspection GroovyAssignabilityCheck
        checksum sysInfo.md5
    }
}

/**
 * Decompress the Java runtimes into folders.
 */
tasks.register('unZipJresTask', Copy) {
    dependsOn 'verifyDownloadedJres'
    group 'AstroImageJ Development'
    mustRunAfter 'verifyDownloadedJres', 'deleteDecompressedJres'

    //noinspection GroovyAssignabilityCheck
    javaRuntimeSystemsProperty.get().each { sys, sysInfo ->
        it.inputs.file(file("${projectDir}/jres/${sysInfo.name}"))
        it.outputs.dir(it.project.layout.projectDirectory.dir("jres/${(sysInfo.name as String).replace("." +sysInfo.ext as String, "")}"))

        if (sysInfo.ext == "tar.gz") {
            from(tarTree(resources.gzip(file("${projectDir}/jres/${sysInfo.name}")))) {
                into ''
            }
        } else if (sysInfo.ext == "zip") {
            from(zipTree(file("${projectDir}/jres/${sysInfo.name}"))) {
                into ''
            }
        } else {
            logger.error("Did not know how to handle " + sysInfo.ext + " for " + sys as String)
        }
    }
    into 'jres'
}

// Define what files belong to all distributions and their location
def commonDist = project.copySpec {
    // Copy astronomy_.jar to correct place in distribution
    from(file("${project(':Astronomy_').layout.buildDirectory.get()}/libs/Astronomy_.jar")) {
        rename { String name -> return 'Astronomy_.jar' }
        into 'plugins'
    }

    from("${projectDir}/packageFiles/common") {
        into ''
    }

    into('plugins') {
        from(file("${projectDir}/packageFiles/plugins"))
    }

    // Copy ij.jar to correct place in distribution
    from(file("${project(':ij').layout.buildDirectory.get()}/libs/ij.jar")) {
        into ''
    }
}

// Create commonFiles directory for use in runAij and distribution generation
project.sync {
    with commonDist
    into "${project.layout.buildDirectory.get()}/commonFiles"
    if (Os.isFamily(Os.FAMILY_MAC) && file("${project.layout.buildDirectory.get()}/commonFiles/AstroImageJ.cfg").exists()) {
        project.exec {
            commandLine('chmod',  'a=rw', "${project.layout.buildDirectory.get()}/commonFiles/AstroImageJ.cfg")
        }
    }
}

/**
 * Copy the common files into the build directory to simplify their use.
 *
 * This is run when building a distribution to refresh the files in case of a change.
 */
tasks.register('commonFiles', Sync) {
    outputs.upToDateWhen { false }
    dependsOn ':ij:shadowJar', ':Astronomy_:build'
    mustRunAfter ':ij:shadowJar', ':Astronomy_:build'
    with commonDist
    into "${project.layout.buildDirectory.get()}/commonFiles"
    doLast {
        if (Os.isFamily(Os.FAMILY_MAC) && file("${project.layout.buildDirectory.get()}/commonFiles/AstroImageJ.cfg").exists()) {
            project.exec {
                commandLine('chmod', 'a=rw', "${project.layout.buildDirectory.get()}/commonFiles/AstroImageJ.cfg")
            }
        }
    }
}

// Generate AIJ-Run directory and set it up for usage
tasks.register('sync', Sync) {
    dependsOn 'commonFiles'
    with commonDist
    //noinspection GroovyAssignabilityCheck
    with {
        from(file("${projectDir}/devLaunchOptions.txt")) {
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
            rename { String name -> return "AstroImageJ.cfg" }
        }
    }
    destinationDir(file("${projectDir}/AIJ-Run"))
}

// Generates a working install directory of AIJ and launches it - make sure to not add it to git!
tasks.register('aijRun', JavaExec) {
    dependsOn 'sync'
    group 'AstroImageJ Development'

    workingDir(file("${projectDir}/AIJ-Run/"))

    setAllJvmArgs(readConfigFile())

    //noinspection GroovyAssignabilityCheck, GroovyAccessibility
    javaLauncher = javaToolchains.launcherFor {// Force it to use the toolchain java version
        languageVersion = JavaLanguageVersion.of(shippingJava)
    }

    classpath = files(file("${projectDir}/AIJ-Run/ij.jar"))
    mainClass = 'ij.ImageJ'
}

List<String> readConfigFile() {
    List<String> args = new ArrayList<>()
    File cfg = file("${projectDir}/AIJ-Run/AstroImageJ.cfg") as File
    if (!cfg.exists()) return args

    File devCfg = file("${projectDir}/devLaunchOptions.txt") as File

    File readCfg = devCfg.exists() ? devCfg : cfg

    logger.lifecycle("Launching using options from: " + (devCfg.exists() ? "dev. config" : "default config") as String)

    readCfg.readLines().each {
        if (it.startsWith("#") /*Comments*/) {
            return
        }
        it.split(" ").each {// Technically this could break, but not expecting too many args in dev environment
            args.add(it as String)
        }
    }
    args.add('-Daij.dev') // Always show full version metadata when running via dev

    logger.lifecycle("Launching with the following arguments: " + args as String)

    return args
}

//suppress access
javapackager {
    // common configuration
    mainClass 'ij.ImageJ'
    bundleJre true
    customizedJre false
    outputDirectory file("${project.layout.buildDirectory.get()}/distributions")
    additionalResources file("${project.layout.buildDirectory.get()}/commonFiles/").listFiles().toList() as List<File>
    runnableJar  file("${project.layout.buildDirectory.get()}/commonFiles/ij.jar")
    assetsDir  file("${projectDir}/packageFiles/assets")
    name  'AstroImageJ'
    winConfig.setWrapJar(false) // Don't merge the ij.jar into the exe file
    macConfig.setRelocateJar(false) // Don't place ij.jar in Java/ folder
    winConfig.setDisableDirPage(false) // Let users set install location
    macConfig.setGeneratePkg(false) // Don't generate pkg as it's installation cannot update memory settings
    macConfig.setAppId("AstroImageJ")
    macConfig.setMacStartup(MacStartup.UNIVERSAL)
    macConfig.setCodesignApp((project.codeSignAndNotarize.toBoolean()))
    //To set a DeveloperID in the environment, see comments in the gradle.properties file.
    macConfig.setNotarizeApp(System.getenv("DeveloperId")!=null && (project.codeSignAndNotarize.toBoolean()))
    macConfig.setKeyChainProfile("AC_PASSWORD")
    macConfig.setDeveloperId(System.getenv("DeveloperId"))
    macConfig.setCustomLauncher(file("${projectDir}/packageFiles/assets/mac/universalJavaApplicationStub"))
    winConfig.exeCreationTool = WindowsExeCreationTool.why
    winConfig.productVersion = "1.1.1"
    winConfig.productName = "Why Java Launcher"
    winConfig.setGenerateMsi(false)
    winConfig.setDisableFinishedPage(false)
    winConfig.setDisableRunAfterInstall(false)


    // Don't copy deps into a "libs" folder - we bundle them into ij.jar or Astronomy_.jar and the plugins folder
    copyDependencies = false

    linuxConfig.wrapJar = false
    //todo todo rpm broken as is includes AstroImageJ executable in AIJ folder, which conflicts with the other files in the package
    // even fixes that generates a broken rpm
    linuxConfig.generateRpm = false

    organizationName  "AstroImageJ"
    vmArgs  [] //['-Xmx3000m', '-Xms256m'] // Launch parameters are set in AstroImageJ.cfg
    version = 'dev-x86' // Dummy version to keep it from saying "unspecified"

    // Set to true to enable installer generation. Needs to be on the target OS and needs special tooling
    // See https://github.com/fvarrui/JavaPackager#generated-artifacts
    // In future installer/package signing will be added. TODO sign the packages
    generateInstaller  true

    fileAssociations = [
            new FileAssociation(mimeType: 'application/fits', extension: 'fits', description: 'FITS File'),
            new FileAssociation(mimeType: 'application/fits', extension: 'fit', description: 'FITS File'),
            new FileAssociation(mimeType: 'application/fits', extension: 'fts', description: 'FITS File'),
            new FileAssociation(mimeType: 'application/fits', extension: 'fits.fz', description: 'FITS File'),
            new FileAssociation(mimeType: 'application/fits', extension: 'fit.fz', description: 'FITS File'),
            new FileAssociation(mimeType: 'application/fits', extension: 'fts.fz', description: 'FITS File'),
            new FileAssociation(mimeType: 'application/fits', extension: 'fits.gz', description: 'FITS File'),
            new FileAssociation(mimeType: 'application/fits', extension: 'fit.gz', description: 'FITS File'),
            new FileAssociation(mimeType: 'application/fits', extension: 'fts.gz', description: 'FITS File'),
            new FileAssociation(mimeType: 'text/tbl', extension: 'tbl', description: 'Table'),
            new FileAssociation(mimeType: 'text/radec', extension: 'radec', description: 'AIJ radec file'),
            new FileAssociation(mimeType: 'text/apertures', extension: 'apertures', description: 'AIJ apertures file'),
            new FileAssociation(mimeType: 'text/plotcfg', extension: 'plotcfg', description: 'AIJ plot config file'),
    ]
}

tasks.register('packageAij')

//noinspection GroovyAssignabilityCheck
javaRuntimeSystemsProperty.get().each {sys, sysInfo ->
    String taskName = "packageAijFor" + (sysInfo.os as String).capitalize() + "_" + sysInfo.arch +
            "_" + sysInfo.hw_bitness + "Bit_" + "Java" + sysInfo.version

    //noinspection GroovyAssignabilityCheck
    tasks.register(taskName, PackageTask) {
        group 'AstroImageJ Development'

        //todo fix incompatibility
        notCompatibleWithConfigurationCache 'Package task issue'

        // Set the platform
        io.github.fvarrui.javapackager.model.Platform.values().each {
            if (it == io.github.fvarrui.javapackager.model.Platform.auto) return
            String osName = sys.toLowerCase().contains("mac") ? "mac" : sys.toLowerCase()
            if (it.name() == osName) {
                //noinspection GroovyAssignabilityCheck
                platform = it
            }
        }

        //noinspection GroovyAssignabilityCheck
        version = project.version

        // Get Java bin fold location
        File runtimePath
        File java = file("${projectDir}/jres/${(sysInfo.name as String).replace("." +sysInfo.ext as String, "")}")
        if (java.exists()) {
            java.traverse(type: groovy.io.FileType.FILES, nameFilter: 'release') {runtimePath = it.parentFile}
        } else { // One of the runtimes does not exist, pull it
            logger.error("A JRE was missing, run unZipJresTask first! " + sys +
                    " will fallback to the default runtime path" as String)
            runtimePath = new File(java, sysInfo.os == "macos" ?
                    "zulu-${shippingJava}.${sysInfo.type}/Contents/Home" : "")
        }

        // Sanity check
        if (runtimePath == null) return

        // Set the runtime
        if (sysInfo.type == "jre") {
            //noinspection GroovyAssignabilityCheck
            jrePath = runtimePath
        } else if (sysInfo.type == "jdk") {
            //noinspection GroovyAssignabilityCheck
            jdkPath = runtimePath
        }

        if (sysInfo.os == "linux") {
            //noinspection GroovyAssignabilityCheck
            createTarball = project.createTarBalls.toBoolean()
        } else {
            //noinspection GroovyAssignabilityCheck
            createZipball = project.createZip.toBoolean()
        }

        // Installer is made by the signing script
        if (sysInfo.os == "macos") {
            generateInstaller = project.createDMG.toBoolean()
        }
    }

    logger.quiet("Added a distribution task: " + taskName as String)

    tasks.named(taskName) {
        //noinspection GroovyAssignabilityCheck
        dependsOn 'unZipJresTask', 'commonFiles'
        //noinspection GroovyAssignabilityCheck
        mustRunAfter 'commonFiles', 'deleteDecompressedJres', 'unZipJresTask'
    }

    // Make the meta task run the smaller ones
    tasks.named("packageAij") {
        group 'AstroImageJ Development'
        //noinspection GroovyAssignabilityCheck
        dependsOn taskName
        outputs.upToDateWhen { false }
    }
}

tasks.withType(PackageTask).configureEach {pkgTsk ->
    if (pkgTsk.name == 'package')
        return
    // Extract platform info from task name, put it in format for file name
    if (!pkgTsk.name.matches("packageAijFor(.+)_((?:x86)|(?:arm))_(\\d{2})Bit_Java(\\d{2})")) {
        throw new GradleException("Package task '${pkgTsk.name}' failed to match, could not determine with confidence platform information")
    }
    def platformInfo = pkgTsk.name.replaceAll("packageAijFor(.+)_((?:x86)|(?:arm))_(\\d{2})Bit_Java(\\d{2})", '$2_$3Bit')

    doLast {
        logger.lifecycle 'Renaming outputs for platform information...'

        outputFiles.forEach {
            if (!it.exists()) {
                logger.info '\tSkipping file that does not exist: {}', it.name
                return
            }

            if (!it.name.matches("AstroImageJ[-_]${project.version}(?:[-_]\\w+)?(\\.\\w+|\\.tar\\.gz)\$")) {
                logger.warn "\tGiven a file '{}' that cannot be handled", it.name
            } else {
                def newName = it.name.replaceAll("AstroImageJ[-_]${project.version}(?:[-_]\\w+)?(\\.\\w+|\\.tar\\.gz)\$", "AstroImageJ_v${project.version}-${platform}-${platformInfo}\$1")
                def originalPath = it.toPath()
                def newPath = originalPath.resolveSibling(newName)

                logger.lifecycle "\tRenaming '{}' to '{}'...", it, newName

                if (!Files.move(originalPath, newPath, StandardCopyOption.REPLACE_EXISTING)) {
                    logger.error "\tFailed to rename '{}' to '{}'", it.name, newName
                }
            }
        }
    }
}

// Task to copy built jars into a certain folder, for use with testing
tasks.register('copyBuiltJars', Copy) {
    dependsOn 'commonFiles'
    group 'AstroImageJ Development'

    onlyIf {
        def properDirectory = file("${projectDir}/jarLocation.txt").exists() &&
                outputDestination().toPath().resolve('ij.jar').toFile().exists()
        if (!properDirectory) {
            logger.error '[copyBuiltJars] Was not given the correct path! ' +
                    'Must be the absolute path to the folder containing ij.jar!' as String
        }
        properDirectory
    }

    def destination = outputDestination()

    // Copy astronomy_.jar to correct place in distribution
    from(file("${project(':Astronomy_').layout.buildDirectory.get()}/libs/astronomy_.jar")) {
        rename { String name -> return 'Astronomy_.jar' }
        into 'plugins'
    }

    // Copy release notes
    from(file("packageFiles/common/release_notes.html")) {
        into ''
    }

    // Copy ij.jar to correct place in distribution
    from(file("${project(':ij').layout.buildDirectory.get()}/libs/ij.jar")) {
        into ''
    }
    into destination

    doLast {
        logger.quiet '[copyBuiltJars] Copying jars to destination...'
    }
}

tasks.register('makeReleaseFiles') {
    group 'AstroImageJ Development'
    dependsOn 'packageAijForWindows_x86_64Bit_Java'+shippingJava

    var buildDir = project.layout.buildDirectory.get()
    var output = buildDir.dir('updatesjava'+minJava)

    // Clear old files
    output.getAsFileTree().forEach {
        delete(it)
    }

    var fullVersion = project.version as String
    var semverVersion = fullVersion.substring(0, fullVersion.lastIndexOf('.'))

    doLast {
        // Copy files, no renames
        copy {
            from("$buildDir/distributions/AstroImageJ") {
                include '**/ij.jar', '**/StartupMacros.txt', '**/AstroImageJ.exe', '**/Astronomy_.jar', '**/release_notes.html'
                eachFile { fcd ->
                    fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(fcd.relativePath.segments.length-1))
                }
                includeEmptyDirs = false
            }

            into output
        }

        // Copy files, with renames
        copy {
            from("$buildDir/distributions/AstroImageJ") {
                include '**/ij.jar', '**/StartupMacros.txt', '**/AstroImageJ.exe', '**/Astronomy_.jar'
                eachFile { fcd ->
                    fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(fcd.relativePath.segments.length-1))
                }
                includeEmptyDirs = false
            }

            into output
            rename '(.+)\\.(.+)', '$1'+semverVersion+'.$2'
        }

        // Update versions.txt
        /*copy {
            from project.resources.text.fromUri('https://www.astro.louisville.edu/software/astroimagej/updates/updatesjava17/versions.txt')
            into output
            rename '(.+)', 'versions.txt'
        }*/

        var versionsTxt = output.file('versions.txt').asFile

        Files.createFile(versionsTxt.toPath())

        versionsTxt << semverVersion << '\n'

        'https://www.astro.louisville.edu/software/astroimagej/updates/updatesjava17/versions.txt'.toURL().withInputStream {
            i -> versionsTxt.withWriterAppend {it << i}
        }
    }
}

tasks.register('makeDailyBuildFiles') {
    group 'AstroImageJ Development'
    dependsOn 'packageAijForWindows_x86_64Bit_Java'+shippingJava

    var buildDir = project.layout.buildDirectory.get()
    var output = buildDir.dir('updatesjava'+minJava)

    // Clear old files
    output.getAsFileTree().forEach {
        delete(it)
    }

    doLast {
        // Copy files, no renames
        copy {
            from("$buildDir/distributions/AstroImageJ") {
                include '**/ij.jar', '**/StartupMacros.txt', '**/AstroImageJ.exe', '**/Astronomy_.jar', '**/release_notes.html'
                eachFile { fcd ->
                    fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(fcd.relativePath.segments.length-1))
                }
                includeEmptyDirs = false
            }

            into output
        }
    }
}

File outputDestination() {
    File locCfg = file("${projectDir}/jarLocation.txt") as File
    def destination = "${projectDir}/out" as String

    if (locCfg.exists()) {
        locCfg.readLines().each {
            if (it.startsWith("#") /*Comments*/) {
                return
            }
            destination = it
        }
    }

    return file(destination) as File
}

// Make Idea's hammer icon run copyBuiltJars
idea.project.settings {
    taskTriggers {
        afterBuild tasks.named('copyBuiltJars')
    }
}