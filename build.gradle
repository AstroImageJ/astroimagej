import groovy.json.JsonSlurper
import io.github.fvarrui.javapackager.gradle.PackageTask
import io.github.fvarrui.javapackager.model.WindowsExeCreationTool
import org.ajoberstar.grgit.Grgit
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        //mavenLocal()
        maven {
            url 'gradlePlugins'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'io.github.fvarrui:javapackager:1.6.7-SNAPSHOT'
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Plugin to download files
    id "de.undercouch.download" version "4.1.1"

    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.+"

    id 'net.nemerosa.versioning' version '2.8.2'

    // Used to download test data
    id 'org.ajoberstar.grgit' version '5.+' apply false
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'

// See https://guides.gradle.org/creating-multi-project-builds/

// Java version to compile and package with
def shippingJava = Integer.parseInt(project.javaShippingVersion as String)
// Minimum Java version binaries should be compatible with
def targetJava = Integer.parseInt(project.minJava as String)

allprojects {
    repositories {
        mavenCentral()
    }
    group 'com.astroimagej'

    tasks.withType(JavaCompile).configureEach {
        // Set language level and binary level to targetJava (binary only when building with a JDK 9+)
        // Ensures newer language features aren't used
        options.release.set(targetJava)

        // AIJ is large, so this caches compiling results and only recompiles changed files
        options.incremental = true

        // Allow unicode
        options.encoding('UTF-8')

        options.fork = true

        options.compilerArgs << '-Xlint:-dep-ann'

        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(shippingJava)
        }
    }

    java {
        toolchain {
            // Gradle will download the JDK for compiling/running if one isn't found
            // This should prevent anyone from using an outdated JDK
            languageVersion.set(JavaLanguageVersion.of(shippingJava))
        }
    }
}

// Get version metadata
final commitHash = '+' + versioning.info.build
final branchName = '+' + versioning.info.branch
final dirtySuffix = !versioning.info.dirty ? '' : '+local'

subprojects {
    version = project.version + branchName + commitHash + dirtySuffix
}

dependencies {
    // This dependency is used by the application.
    //implementation 'com.google.guava:guava:29.0-jre'
    implementation project(':Nom_Fits')
    implementation project(':ij')
    implementation project(':Astronomy_')

    // Use JUnit test framework
    testImplementation(platform('org.junit:junit-bom:5.9.1'))
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.assertj:assertj-swing-junit:3.17.1'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }

    //forkEvery = 1

    systemProperty "enforceEDTValidation", "false"

    //noinspection GroovyAssignabilityCheck, GroovyAccessibility
    javaLauncher = javaToolchains.launcherFor {// Force it to use the toolchain java version
        languageVersion = JavaLanguageVersion.of(shippingJava)
    }

    jvmArgs(readConfigFile())
    workingDir(file("${projectDir}/AIJ-Run/"))

    classpath += files(file("${projectDir}/AIJ-Run/ij.jar"))
}

tasks.test.dependsOn("preTest")
test.onlyIf { project.hasProperty('runTest') }

task preTest {
    def testDataPath = "${projectDir}/repos/aijtestdata"
    doLast {
        def targetRepo = file(testDataPath)
        if(!targetRepo.exists()) {
            def gitRepo = Grgit.clone(dir: testDataPath, uri: 'https://github.com/AstroImageJ/AijTestData')
        } else {
            def gitRepo = Grgit.open(dir: testDataPath)
            gitRepo.fetch()
            gitRepo.pull()
        }
    }
}

/**
 * The set of Java runtimes to download and package AIJ for.
 * Terms in the map are based on the query parameters.
 * To add a distribution, simply give it a unique name and fill out its map with the proper values.
 * See https://app.swaggerhub.com/apis-docs/azul/zulu-download-community/1.0#/bundles/get_bundles_latest_
 *
 * The file's name (name), major Java version (version), and MD5 hash (md5) are also added to this map. Those entries
 * are excluded from the definition for brevity.
 */
def javaRuntimeSystems =
           [ mac: [ext: "zip", arch: "x86", os: "macos", hw_bitness: "64"]
           , armMac: [ext: "zip", arch: "arm", os: "macos", hw_bitness: "64"]
           , linux: [ext: "tar.gz", arch: "x86", os: "linux", hw_bitness: "64"]
           //, linuxArm: [ext: "tar.gz", arch: "arm", os: "linux", hw_bitness: "64"]
           //, linux32: [ext: "tar.gz", arch: "x86", os: "linux", hw_bitness: "32"]
           //, alpineLinux: [ext: "tar.gz", arch: "x86", os: "linux_musl", hw_bitness: "64"]
           , windows: [ext: "zip", arch: "x86", os: "windows", hw_bitness: "64"]
           , armWindows: [ext: "zip", arch: "arm", os: "windows", hw_bitness: "64"]
           //, windows32: [ext: "zip", arch: "x86", os: "windows", hw_bitness: "32"]
           ]

boolean canConnectToAzul = true

/**
 * Download the specified Java runtimes based on javaRuntimeSystems.
 */
task downloadJavaRuntimes(type: Download) {
    mkdir(file("${projectDir}/jres"))

    onlyIf {
        //noinspection GroovyAssignabilityCheck
        javaRuntimeSystems.each { sys, sysInfo ->
            // Other parameters of note:
            // &support_term=lts/mts/sts &release_status=ga/ea/both &bundle_type=${sysInfo.type}
            String url = "https://api.azul.com/zulu/download/community/v1.0/bundles/latest/?" +
                    "os=${sysInfo.os}&arch=${sysInfo.arch}&hw_bitness=${sysInfo.hw_bitness}" +
                    "&ext=${sysInfo.ext}&java_version=${shippingJava}"

            // Ensure Azul is responding to API requests
            def testUrl = new URL(url)
            def connection = testUrl.openConnection()
            connection.requestMethod = 'GET'
            if (connection.responseCode != 200) {
                logger.warn("A runtime (sys = {}, {}, {}, {}) failed to return from Azul!",
                        sysInfo.os, sysInfo.arch, sysInfo.ext, sysInfo.type)
                canConnectToAzul = false
            }
        }

        return canConnectToAzul
    }

    //noinspection GroovyAssignabilityCheck
    javaRuntimeSystems.each {sys, sysInfo ->
        // Other parameters of note:
        // &support_term=lts/mts/sts &release_status=ga/ea/both &bundle_type=${sysInfo.type}
        String url ="https://api.azul.com/zulu/download/community/v1.0/bundles/latest/?" +
                "os=${sysInfo.os}&arch=${sysInfo.arch}&hw_bitness=64" +
                "&ext=${sysInfo.ext}&java_version=${shippingJava}"
        def meta
        try {
            meta = new JsonSlurper().parse(new URL(url)) // Pull the data from Azul
        } catch (Exception ignored) {
            logger.warn("A runtime (sys = {}, {}, {}, {}) failed to return from Azul!",
                    sysInfo.os, sysInfo.arch, sysInfo.ext, sysInfo.type)
            canConnectToAzul = false
            return
        }

        // Update the maps with the metadata
        sysInfo.version = meta.java_version.first()
        sysInfo.ext = meta.ext as String
        sysInfo.name = meta.name as String
        sysInfo.md5 = meta.md5_hash as String
        sysInfo.type = meta.bundle_type as String

        // Perform the download
        //noinspection GroovyAssignabilityCheck
        src meta.url
        //noinspection GroovyAssignabilityCheck
        overwrite false
        //noinspection GroovyAssignabilityCheck
        dest 'jres'
    }

    if (!canConnectToAzul) return

    // Collect current runtime files and extensions
    //noinspection GroovyAssignabilityCheck
    def currentFiles = javaRuntimeSystems.collectEntries {[it.value.name, it.value.ext]}

    // Remove old unpacked runtimes
    file("${projectDir}/jres").traverse(type: groovy.io.FileType.DIRECTORIES, maxDepth: 0) {
        if (!currentFiles.collect {name, ext ->
            (name as String).replace("." + ext as String, "")}.contains(it.name)) {
            it.deleteDir()
        }
    }

    // Remove old packed runtimes
    file("${projectDir}/jres").traverse(type: groovy.io.FileType.FILES, maxDepth: 0) {
        if (!currentFiles.containsKey(it.name)) {
            it.delete()
        }
    }

}

/**
 * On MacOs, for some reason after a jdk is used once for packaging it becomes invalid.
 * This is run to "reset" the JDK to allow packaging to complete.
 * Runs only on MacOs
 */
task deleteDecompressedJres() {
    outputs.upToDateWhen {false}
    onlyIf {
        Os.isFamily(Os.FAMILY_MAC)
    }
    if (Os.isFamily(Os.FAMILY_MAC)) {
        logger.info('Removing decompressed runtimes.')
        // Remove old unpacked runtimes
        file("${projectDir}/jres").traverse(type: groovy.io.FileType.DIRECTORIES, maxDepth: 0) {
            it.deleteDir()
        }
    }
}

/**
 * Verify the downloaded Java runtimes are correct.
 * If a file fails the check, delete it and rerun to attempt downloading again.
 * Could also check the sha256_hash.
 */
task verifyDownloadedJres(type: Verify, dependsOn: downloadJavaRuntimes) {
    mustRunAfter downloadJavaRuntimes
    //noinspection GroovyAssignabilityCheck
    javaRuntimeSystems.each {sys, sysInfo ->
        //noinspection GroovyAssignabilityCheck
        src file("${projectDir}/jres/${sysInfo.name}")
        //noinspection GroovyAssignabilityCheck
        algorithm 'MD5'
        //noinspection GroovyAssignabilityCheck
        checksum sysInfo.md5
    }
}

/**
 * Decompress the Java runtimes into folders.
 */
task unZipJresTask(type: Copy, dependsOn: verifyDownloadedJres) {
    group 'AstroImageJ Development'
    mustRunAfter verifyDownloadedJres, deleteDecompressedJres
    //noinspection GroovyAssignabilityCheck
    javaRuntimeSystems.each {sys, sysInfo ->
        if (sysInfo.ext == "tar.gz") {
            from(tarTree(resources.gzip(file("${projectDir}/jres/${sysInfo.name}")))) {
                into ''
            }
        } else if (sysInfo.ext == "zip") {
            from(zipTree(file("${projectDir}/jres/${sysInfo.name}"))) {
                into ''
            }
        } else {
            logger.error("Did not know how to handle " + sysInfo.ext + " for " + sys as String)
        }
    }
    into 'jres'
}

// Define what files belong to all distributions and their location
def commonDist = project.copySpec {
    // Copy astronomy_.jar to correct place in distribution
    from(file("${project(':Astronomy_').buildDir}/libs/Astronomy_.jar")) {
        rename { String name -> return 'Astronomy_.jar' }
        into 'plugins'
    }

    from("${projectDir}/packageFiles/common") {
        into ''
    }

    into('plugins') {
        from(file("${projectDir}/packageFiles/plugins"))
    }

    // Copy ij.jar to correct place in distribution
    from(file("${project(':ij').buildDir}/libs/ij.jar")) {
        into ''
    }
}

// Create commonFiles directory for use in runAij and distribution generation
project.sync {
    with commonDist
    into "${buildDir}/commonFiles"
    if (Os.isFamily(Os.FAMILY_MAC) && file("${buildDir}/commonFiles/AstroImageJ.cfg").exists()) {
        project.exec {
            commandLine('chmod',  'a=rw', "${buildDir}/commonFiles/AstroImageJ.cfg")
        }
    }
}

/**
 * Copy the common files into the build directory to simplify their use.
 *
 * This is run when building a distribution to refresh the files in case of a change.
 */
task commonFiles(type: Sync) {
    outputs.upToDateWhen {false}
    dependsOn ':ij:shadowJar', ':Astronomy_:build'
    mustRunAfter ':ij:shadowJar', ':Astronomy_:build'
    with commonDist
    into "${buildDir}/commonFiles"
    doLast {
        if (Os.isFamily(Os.FAMILY_MAC) && file("${buildDir}/commonFiles/AstroImageJ.cfg").exists()) {
            project.exec {
                commandLine('chmod',  'a=rw', "${buildDir}/commonFiles/AstroImageJ.cfg")
            }
        }
    }
}

// Generate AIJ-Run directory and set it up for usage
task sync(dependsOn: commonFiles, type: Sync) {
    with commonDist
    //noinspection GroovyAssignabilityCheck
    with {
        from(file("${projectDir}/devLaunchOptions.txt")) {
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
            rename {String name -> return "AstroImageJ.cfg"}
        }
    }
    destinationDir(file("${projectDir}/AIJ-Run"))
}

// Generates a working install directory of AIJ and launches it - make sure to not add it to git!
task aijRun(dependsOn: sync, type: JavaExec) {
    group 'AstroImageJ Development'

    workingDir(file("${projectDir}/AIJ-Run/"))

    setAllJvmArgs(readConfigFile())

    //noinspection GroovyAssignabilityCheck, GroovyAccessibility
    javaLauncher = javaToolchains.launcherFor {// Force it to use the toolchain java version
        languageVersion = JavaLanguageVersion.of(shippingJava)
    }

    classpath = files(file("${projectDir}/AIJ-Run/ij.jar"))
    mainClass = 'ij.ImageJ'
}

List<String> readConfigFile() {
    List<String> args = new ArrayList<>()
    File cfg = file("${projectDir}/AIJ-Run/AstroImageJ.cfg") as File
    if (!cfg.exists()) return args

    File devCfg = file("${projectDir}/devLaunchOptions.txt") as File

    File readCfg = devCfg.exists() ? devCfg : cfg

    logger.lifecycle("Launching using options from: " + (devCfg.exists() ? "dev. config" : "default config") as String)

    readCfg.readLines().each {
        if (it.startsWith("#") /*Comments*/) {
            return
        }
        it.split(" ").each {// Technically this could break, but not expecting too many args in dev environment
            args.add(it as String)
        }
    }
    args.add('-Daij.dev') // Always show full version metadata when running via dev

    logger.lifecycle("Launching with the following arguments: " + args as String)

    return args
}

//suppress access
javapackager {
    // common configuration
    mainClass 'ij.ImageJ'
    bundleJre true
    customizedJre false
    outputDirectory file("${buildDir}/distributions")
    additionalResources file("${buildDir}/commonFiles/").listFiles().toList() as List<File>
    runnableJar  file("${buildDir}/commonFiles/ij.jar")
    assetsDir  file("${projectDir}/packageFiles/assets")
    name  'AstroImageJ'
    winConfig.setWrapJar(false) // Don't merge the ij.jar into the exe file
    macConfig.setRelocateJar(false) // Don't place ij.jar in Java/ folder
    winConfig.setDisableDirPage(false) // Let users set install location
    macConfig.setGeneratePkg(false) // Don't generate pkg as it's installation cannot update memory settings
    macConfig.setEntitlements(project.file('packageFiles/aij_entitlements.txt'))
    macConfig.setAppId("AstroImageJ")
    winConfig.exeCreationTool = WindowsExeCreationTool.why
    winConfig.productVersion = "1.1.1"
    winConfig.productName = "Why Java Launcher"

    // Don't copy deps into a "libs" folder - we bundle them into ij.jar or Astronomy_.jar and the plugins folder
    copyDependencies = false

    linuxConfig.wrapJar = false

    organizationName  "AstroImageJ"
    vmArgs  [] //['-Xmx3000m', '-Xms256m'] // Launch parameters are set in AstroImageJ.cfg
    version = 'dev-x86' // Dummy version to keep it from saying "unspecified"

    // Set to true to enable installer generation. Needs to be on the target OS and needs special tooling
    // See https://github.com/fvarrui/JavaPackager#generated-artifacts
    // In future installer/package signing will be added. TODO sign the packages
    generateInstaller  true
}

task packageAij

//noinspection GroovyAssignabilityCheck
javaRuntimeSystems.each {sys, sysInfo ->
    if (!canConnectToAzul) {
        logger.error("Skipping system creation, failed to connect to Azul!")
        return
    }
    String taskName = "packageAijFor" + (sysInfo.os as String).capitalize() + "_" + sysInfo.arch +
            "_" + sysInfo.hw_bitness + "Bit_" + "Java" + sysInfo.version

    //noinspection GroovyAssignabilityCheck
    tasks.register(taskName, PackageTask) {
        group 'AstroImageJ Development'

        //noinspection GroovyAssignabilityCheck
        version = sysInfo.arch + "_" + sysInfo.hw_bitness + "Bit"
        // Set the platform
        io.github.fvarrui.javapackager.model.Platform.values().each {
            if (it == io.github.fvarrui.javapackager.model.Platform.auto) return
            String osName = sys.toLowerCase().contains("mac") ? "mac" : sys.toLowerCase()
            if (it.name() == osName) {
                //noinspection GroovyAssignabilityCheck
                platform = it
            }
        }

        // Get Java bin fold location
        File runtimePath
        File java = file("${projectDir}/jres/${(sysInfo.name as String).replace("." +sysInfo.ext as String, "")}")
        if (java.exists()) {
            java.traverse(type: groovy.io.FileType.FILES, nameFilter: 'release') {runtimePath = it.parentFile}
        } else { // One of the runtimes does not exist, pull it
            logger.error("A JRE was missing, run unZipJresTask first! " + sys +
                    " will fallback to the default runtime path" as String)
            runtimePath = new File(java, sysInfo.os == "macos" ?
                    "zulu-${shippingJava}.${sysInfo.type}/Contents/Home" : "")
        }

        // Sanity check
        if (runtimePath == null) return

        // Set the runtime
        if (sysInfo.type == "jre") {
            //noinspection GroovyAssignabilityCheck
            jrePath = runtimePath
        } else if (sysInfo.type == "jdk") {
            //noinspection GroovyAssignabilityCheck
            jdkPath = runtimePath
        }

        if (sysInfo.os == "linux") {
            //noinspection GroovyAssignabilityCheck
            createTarball = true
        } else {
            //noinspection GroovyAssignabilityCheck
            createZipball = true
        }

        // Installer is made by the signing script
        if (sysInfo.os == "macos") {
            generateInstaller = false
        }
    }

    logger.quiet("Added a distribution task: " + taskName as String)

    tasks.named(taskName) {
        //noinspection GroovyAssignabilityCheck
        dependsOn unZipJresTask, commonFiles
        //noinspection GroovyAssignabilityCheck
        mustRunAfter commonFiles, deleteDecompressedJres, unZipJresTask
    }

    // Make the meta task run the smaller ones
    tasks.named("packageAij") {
        group 'AstroImageJ Development'
        //noinspection GroovyAssignabilityCheck
        dependsOn taskName
        outputs.upToDateWhen { false }
    }
}

// Task to copy built jars into a certain folder, for use with testing
task copyBuiltJars(dependsOn: commonFiles, type: Copy) {
    group 'AstroImageJ Development'

    onlyIf {
        def properDirectory = file("${projectDir}/jarLocation.txt").exists() &&
                outputDestination().toPath().resolve('ij.jar').toFile().exists()
        if (!properDirectory) {
            logger.error '[copyBuiltJars] Was not given the correct path! ' +
                    'Must be the absolute path to the folder containing ij.jar!' as String
        }
        properDirectory
    }

    def destination = outputDestination()

    // Copy astronomy_.jar to correct place in distribution
    from(file("${project(':Astronomy_').buildDir}/libs/astronomy_.jar")) {
        rename { String name -> return 'Astronomy_.jar' }
        into 'plugins'
    }

    // Copy ij.jar to correct place in distribution
    from(file("${project(':ij').buildDir}/libs/ij.jar")) {
        into ''
    }
    into destination

    doLast {
        logger.quiet '[copyBuiltJars] Copying jars to destination...'
    }
}

File outputDestination() {
    File locCfg = file("${projectDir}/jarLocation.txt") as File
    def destination = "${projectDir}/out" as String

    if (locCfg.exists()) {
        locCfg.readLines().each {
            if (it.startsWith("#") /*Comments*/) {
                return
            }
            destination = it
        }
    }

    return file(destination) as File
}

// Make Idea's hammer icon run copyBuiltJars
idea.project.settings {
    taskTriggers {
        afterBuild tasks.getByName('copyBuiltJars')
    }
}