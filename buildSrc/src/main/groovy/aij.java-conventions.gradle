plugins {
    id 'java'
}

repositories {
    mavenCentral()
}

group 'com.astroimagej'

// Work around potential project isolation issues by using the provider to get values from gradle.properties in
// the root directory, as opposed to `Integer.parseInt(properties['javaShippingVersion'] as String)`
// Java version to compile and package with
def shippingJava = providers.gradleProperty('javaShippingVersion').map { Integer.parseInt(it) }.get()
// Minimum Java version binaries should be compatible with
def targetJava = providers.gradleProperty('minJava').map { Integer.parseInt(it) }.get()

// Use to share built artifacts with the root project so it can package them
// https://docs.gradle.org/current/userguide/cross_project_publications.html#sec:simple-sharing-artifacts-between-projects
configurations {
    shippingJar {
        canBeConsumed = true
        canBeResolved = false
    }
}

tasks.withType(JavaCompile).configureEach {
    // Set language level and binary level to targetJava (binary only when building with a JDK 9+)
    // Ensures newer language features aren't used
    options.release.set(targetJava)

    // AIJ is large, so this caches compiling results and only recompiles changed files
    options.incremental = true

    // Allow unicode
    options.encoding('UTF-8')

    options.fork = true

    options.compilerArgs << '-Xlint:-dep-ann'

    //options.listFiles = true

    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(shippingJava)
    }
}

java {
    toolchain {
        // Gradle will download the JDK for compiling/running if one isn't found
        // This should prevent anyone from using an outdated JDK
        languageVersion.set(JavaLanguageVersion.of(shippingJava))
    }
}