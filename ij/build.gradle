plugins {
    id 'aij.java-library-conventions'
    id "com.gradleup.shadow" version "8.3.2"
}

dependencies {
    api project(':Nom_Fits')
    implementation 'org.openjdk.nashorn:nashorn-core:15.4'
    api 'de.rototor.pdfbox:graphics2d:3.0.2'
    api 'net.java.dev.jna:jna-platform:5.14.0'
    api fileTree(dir: "${rootDir}/aijLibs", include: '*.jar')
    implementation 'ch.randelshofer:fastdoubleparser:1.0.0'
}

artifacts {
    shippingJar(shadowJar)
}

def mainClassName = 'ij.ImageJ'

processResources {
    // Use a provider to work around the pact that we reference project and the version is dynamic
    // Have to do it this way with go-between variable to force it to get the updated value
    def v = project.version
    inputs.property("version", v)

    filesMatching("aij_version.txt") {
        expand "version": v
    }
}

jar {
    //FileTree m = fileTree("${rootProject.projectDir}/src/main/resources/plugins/")
    //Collection n = m.include("**/*.jar").grep()

    archiveFileName = 'ij-standalone.jar'

    manifest {
        attributes("Main-Class": mainClassName,
                    )//"Class-Path": "plugins/ ${n.collect {'plugins/' + ((File)it).getName()}.join(' ')}")
    }
}

shadowJar {
    //outputs.upToDateWhen {false}
    archiveFileName = 'ij.jar'

    // Exclude patterns
    def excludePatterns = [
            "**/*.jnilib",
            "**/*.so",
            "**/*.a"
    ]

    // Set excludes to the task inputs
    inputs.property("excludes", excludePatterns)

    // Exclude non-Windows binaries
    exclude excludePatterns
}