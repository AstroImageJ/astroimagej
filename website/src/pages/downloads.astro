---
import '../styles/global.scss';
import '../styles/downloads.scss';
import fs from 'fs';
import path from "path";
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';

const versionsIndexPath = path.join(process.cwd(), "public", "meta", "versions.json");
let versionsIndex = { versions: [] };
try {
  versionsIndex = JSON.parse(fs.readFileSync(versionsIndexPath, "utf-8"));
} catch (e) {
  console.warn("[DownloadPage] couldn't read versions index:", e);
}

function loadVersionMeta(entry) {
  const metaPath = path.join(process.cwd(), "public", "meta", "versions", `${entry.version}.json`);
    try {
      return JSON.parse(fs.readFileSync(metaPath, "utf-8"));
    } catch (e) {
      console.warn("[DownloadButton] couldn't read version metadata:", metaPath, e);
    }
}

const loaded = [];
for (const v of (versionsIndex.versions || [])) {
  const loadedOne = loadVersionMeta(v);
  loadedOne.releaseTime = v.releaseTime;
  loadedOne.type = v.type;
  loaded.push(loadedOne);
  console.log("[DownloadPage] loaded", v.version, loadedOne ? 'OK' : 'ERROR');
  //console.log(loadedOne);
}


function compareVersions(a, b) {
  const aParts = a.version.split('.').map(Number);
  const bParts = b.version.split('.').map(Number);
  const len = Math.max(aParts.length, bParts.length);
  for (let i = 0; i < len; i++) {
    const aVal = aParts[i] || 0;
    const bVal = bParts[i] || 0;
    if (aVal !== bVal) return bVal - aVal;
  }
  return 0;
}

// Sort versions by version number
loaded.sort(compareVersions);

const embedVersions = loaded.map(l => ({
  version: l.version,
  type: l.type,
  artifacts: (l.artifacts) ? l.artifacts : [],
  releaseTime: l.releaseTime,
  _loadError: l._error || null
}));

function presentArchs(arch) {
  arch = arch.map(a => {
      switch (a) {
        case 'ARM64': return 'arm64';
        case 'AMD64': return 'x64';
        default: return a;
      }
  });
  return arch;
}
function presentOs(os) {
  os = os.map(a => {
      return a.charAt(0) + a.substring(1).toLowerCase()
  });
  return os;
}

function versionToUrl(version) {
  return "/releases/" + version.replace(/\./g, "");
}
---
<!doctype html>
<html lang="en">
  <BaseHead title="Downloads"/>

  <body>
    <div class="glow"></div>
    <Header title="" link="/" />
    <div class="wrap">
      <h1>Downloads</h1>

      <div class="info release">
        <p> Signatures can be verified using <a href="https://docs.sigstore.dev/quickstart/quickstart-cosign/#verifying-a-signed-blob" target="_blank" rel="noopener noreferrer">Sigstore</a>.
          <button class="copy" type="button" data-sha="https://github.com/AstroImageJ/astroimagej/.github/workflows/publish.yml@refs/heads/master" title="Copy Signing Identity">Signing Identity</button>
          <button class="copy" type="button" data-sha="https://token.actions.githubusercontent.com" title="Copy OIDC Provider">OIDC Provider</button>
        <p><a href="https://support.apple.com/en-us/116943#:~:text=On%20Mac%20computers%20with%20Apple,name%20of%20an%20Intel%20processor." target="_blank" rel="noopener">Which Mac version do I need?</a></p>
      </div>
      <br>
      <hr>
      <br>

      <div id="releases" class="posts" transition:name="post">
        {embedVersions.length === 0 ? (
          <div class="release">
            <p class="small">No versions were found. Ensure <code>public/meta/versions.json</code> exists and contains a `versions` array.</p>
            {versionsIndex._error ? <p class="error small">Read error: {versionsIndex._error}</p> : null}
          </div>
        ) : null}

        {embedVersions.map((v) => (
          <section class="release content" data-version={v.version}>
            <h2>{v.version}{v.type ? ` ${v.type === 'PRERELEASE' ? '(Pre-release)' : v.type === 'DAILY_BUILD' ? '(Daily Build)' : ''}` : ''}</h2>
            <div class="meta">Published: {v.releaseTime || 'unknown'}</div>
            <div class="meta">
              <a href={versionToUrl(v.version)} class="primary">View release notes</a>
            </div>

            {v._loadError ? <p class="error small">Failed to read per-version metadata at build time: {v._loadError}</p> : null}

            <p class="small">Release assets:</p>

            <div class="assets">
              {v.artifacts.length === 0 ? <p class="small">No artifacts found in metadata for this release.</p> : null}

              {v.artifacts.map((a) => (
                <div class="asset">
                  <a class="name" href={a.url} target="_blank" rel="noopener noreferrer">AstroImageJ for {presentOs(a.os)} {presentArchs(a.arch)}</a>

                  <div class="right">
                    {a.sha256 ? (
                      <button class="copy" type="button" data-sha={a.sha256} title="Copy SHA256">sha256</button>
                    ) : null}
                    {a.signatureUrl ? (
                      <a class="small" href={a.signatureUrl} target="_blank" rel="noopener noreferrer">Sigstore signature</a>
                    ) : null}
                  </div>
                </div>
              ))}
            </div>
          </section>
        ))}
      </div>
    </div>
    <script>
      // Copy SHA256 on button click
      document.addEventListener('click', async (e) => {
        const btn = e.target.closest('button.copy');
        if (!btn) return;
        const sha = btn.getAttribute('data-sha');
        if (!sha) return;
        const text = btn.textContent;
        try {
          await navigator.clipboard.writeText(sha);
          btn.textContent = "Copied!";
          setTimeout(()=> btn.textContent = text, 2000);
        } catch (err) {
          console.error("Clipboard write failed", err);
          // fallback: select the short text so user can copy manually
          btn.textContent = "Copy failed";
          setTimeout(()=> btn.textContent = text, 2000);
        }
      });
    </script>
  </body>
</html>
